#include <stdio.h>
#include <string.h>

struct process_Struct
 {
    char process_name[20];
    int arrival_time, burst_time, completion_time, remaining;
} temp_Struct;

void faculty_Queue(int no_of_process) 
{
    int count, arrival_Time, burst_Time, quantum_time;
    struct process_Struct faculty_Process[no_of_process];

    for (count = 0; count < no_of_process; count++)
	 {
        printf("Enter the details of Process[%d]\n", count + 1);
        printf("Process Name : ");
        scanf("%s", faculty_Process[count].process_name);

        printf("Arrival Time : ");
        scanf("%d", &faculty_Process[count].arrival_time);

        printf("Burst Time : ");
        scanf("%d", &faculty_Process[count].burst_time);
        printf("\n");
    }

    printf("Enter the quantum time for FACULTY queue : ");
    scanf("%d", &quantum_time);

    
    for (count = 0; count < no_of_process; count++) {
        for (int x = count + 1; x < no_of_process; x++) {
            if (faculty_Process[count].arrival_time > faculty_Process[x].arrival_time) {
                temp_Struct = faculty_Process[count];
                faculty_Process[count] = faculty_Process[x];
                faculty_Process[x] = temp_Struct;
            }
        }
    }

    for (count = 0; count < no_of_process; count++)
	 {
        faculty_Process[count].remaining = faculty_Process[count].burst_time;
        faculty_Process[count].completion_time = 0;
    }

    int total_time, queue, round_robin[20];
    total_time = 0;
    queue = 0;
    round_robin[queue] = 0;

    int flag, n, z, waiting_time = 0;
    do 
    {
        flag = 0;
        for (count = 0; count < no_of_process; count++)
        {
            if (total_time >= faculty_Process[count].arrival_time) 
            {
                z = 0;
                for (int x = 0; x <= queue; x++) 
                {
                    if (round_robin[x] == count) 
                    {
                        z++;
                    }
                }
                if (z == 0)
                {
                    queue++;
                    round_robin[queue] = count;
                }
            }
        }

        if (queue == 0)
        {
            n = 0;
        } else
        {
            if (faculty_Process[round_robin[n]].remaining == 0) 
            {
                n++;
            }
            if (n > queue)
            {
                n = (n - 1) % queue;
            }
        }
        if (faculty_Process[round_robin[n]].remaining > 0)
        {
            if (faculty_Process[round_robin[n]].remaining < quantum_time)
            {
                total_time += faculty_Process[round_robin[n]].remaining;
                faculty_Process[round_robin[n]].remaining = 0;
            } else 
            {
                total_time += quantum_time;
                faculty_Process[round_robin[n]].remaining -= quantum_time;
            }
            faculty_Process[round_robin[n]].completion_time = total_time;
        }
        n++;
        flag = 0;
        for (count = 0; count < no_of_process; count++)
        {
            if (faculty_Process[count].remaining > 0) 
            {
                flag++;
            }
        }
        
	}
